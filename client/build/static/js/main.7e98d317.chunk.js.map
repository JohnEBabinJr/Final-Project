{"version":3,"sources":["spotify-icon.png","hash.js","components/Player/index.js","components/Playlist/index.js","config_example.js","Host.js","guest_config.js","Guest.js","utils/API.js","App.js","components/Colorchange/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Player","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","token","deviceId","error","loggedIn","trackName","artistName","albumName","nickname","playing","position","duration","playerCheckInterval","_this2","console","log","setState","setInterval","checkForPlayer","Spotify","clearInterval","player","name","getOAuthToken","cb","createEventHandlers","connect","_state$track_window","track_window","currentTrack","current_track","album","artists","map","artist","join","paused","_this3","on","e","onStateChanged","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data","device_id","wrap","_context","prev","next","transferPlaybackHere","stop","_x","apply","arguments","_this$state","fetch","method","headers","authorization","concat","Content-Type","body","JSON","stringify","device_ids","play","previousTrack","togglePlay","nextTrack","_this4","_this$state2","react_default","createElement","className","class","onClick","onPrevClick","onPlayClick","onNextClick","id","scope","React","Component","Playlist","children","require","config","scopes","Host","handleInputChange","event","_event$target","target","value","defineProperty","handleFormSubmit","modalIsOpen","openModal","bind","assertThisInitialized","afterOpenModal","closeModal","Button","lib_default","isOpen","onAfterOpen","onRequestClose","overlayClassName","contentLabel","guestScopes","Guest","preventDefault","getSong","roomId","API","getTracks","axios","get","getTracksById","getTracksByRoomId","deleteTracks","delete","saveTrack","trackData","post","App","makeRoom","nick","sessionStorage","getItem","room","removeItem","Arr","i","push","Math","floor","random","getStuffFromDB","then","res","songArray","handleModalSubmit","setItem","ChangeColorFunction","username","tempTrack","tempArtist","tempAlbum","images","url","duration_ms","is_playing","nextToPlay","progress_ms","getCurrentlyPlaying","_token","access_token","setTimeout","$","type","beforeSend","xhr","setRequestHeader","success","query","alert","nickName","trackId","tracks","items","albumCover","userName","github","href","aboutUs","home","pee","style","float","marginLeft","placeholder","onChange","src","logo","alt","src_Host","src_Guest","for","components_Playlist","song","setCurrentPlayingSong","components_Player","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e98d317.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spotify-icon.daf13776.png\";","// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;\n","import React from \"react\";\nimport { userInfo } from \"os\";\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: this.props.token,\n      deviceId: \"\",\n      error: \"\",\n      loggedIn: false,\n      trackName: \"Track Name\",\n      artistName: \"Artist Name\",\n      albumName: \"Album Name\",\n      nickname: \"Nickname\",\n      playing: false,\n      position: 0,\n      duration: 0\n    };\n    this.playerCheckInterval = null;\n  }\n\n  handleLogin() {\n    console.log(this.props);\n    this.setState({ token: this.props.token });\n    if (this.state.token !== \"\") {\n      this.setState({ loggedIn: true });\n    }\n\n    this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\n  }\n\n  checkForPlayer() {\n    const { token } = this.state;\n\n    if (window.Spotify !== null) {\n      clearInterval(this.playerCheckInterval);\n      this.player = new window.Spotify.Player({\n        name: \"Spotify Player\",\n        getOAuthToken: cb => {\n          cb(token);\n        }\n      });\n      this.createEventHandlers();\n\n      // finally, connect!\n      this.player.connect();\n    }\n  }\n\n  onStateChanged(state) {\n    // if we're no longer listening to music, we'll get a null state.\n    if (state !== null) {\n      const {\n        current_track: currentTrack,\n        position,\n        duration\n      } = state.track_window;\n      const trackName = currentTrack.name;\n      const albumName = currentTrack.album.name;\n      const artistName = currentTrack.artists\n        .map(artist => artist.name)\n        .join(\", \");\n      const playing = !state.paused;\n      this.setState({\n        position,\n        duration,\n        trackName,\n        albumName,\n        artistName,\n        playing\n      });\n    }\n  }\n\n  createEventHandlers() {\n    this.player.on(\"initialization_error\", e => {\n      console.error(e);\n    });\n    this.player.on(\"authentication_error\", e => {\n      console.error(e);\n      this.setState({ loggedIn: false });\n    });\n    this.player.on(\"account_error\", e => {\n      console.error(e);\n    });\n    this.player.on(\"playback_error\", e => {\n      console.error(e);\n    });\n\n    // Playback status updates\n    this.player.on(\"player_state_changed\", state => this.onStateChanged(state));\n\n    // this.player.getCurrentState().then(state => {\n    //   if (!state) {\n    //     console.error(\"User is not playing music through the Web Playback SDK\");\n    //     return;\n    //   }\n\n    //   let {\n    //     current_track,\n    //     next_tracks: [next_track]\n    //   } = state.track_window;\n\n    //   console.log(\"Currently Playing\", current_track);\n    //   console.log(\"Playing Next\", next_track);\n    // });\n\n    // Ready\n    this.player.on(\"ready\", async data => {\n      let { device_id } = data;\n      console.log(\"Let the music play on!\");\n      await this.setState({ deviceId: device_id });\n      this.transferPlaybackHere();\n    });\n  }\n\n  transferPlaybackHere() {\n    const { deviceId, token } = this.state;\n    fetch(\"https://api.spotify.com/v1/me/player\", {\n      method: \"PUT\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        device_ids: [deviceId],\n        play: true\n      })\n    });\n  }\n\n  onPrevClick() {\n    this.player.previousTrack();\n  }\n\n  onPlayClick() {\n    this.player.togglePlay();\n  }\n\n  onNextClick() {\n    this.player.nextTrack();\n  }\n\n  componentDidMount() {\n    // const play = ({\n    //   spotify_uri,\n    //   playerInstance: {\n    //     _options: { getOAuthToken, id }\n    //   }\n    // }) => {\n    //   getOAuthToken(access_token => {\n    //     fetch(`https://api.spotify.com/v1/me/player/play?device_id=${id}`, {\n    //       method: \"PUT\",\n    //       body: JSON.stringify({ uris: [spotify_uri] }),\n    //       headers: {\n    //         \"Content-Type\": \"application/json\",\n    //         Authorization: `Bearer ${access_token}`\n    //       }\n    //     });\n    //   });\n    // };\n    // play({\n    //   playerInstance: new window.Spotify.Player({ name: \"Spotify Play\" }),\n    //   spotify_uri: \"spotify:track:7xGfFoTpQ2E7fRF5lN10tr\"\n    // });\n  }\n\n  render() {\n    const {\n      token,\n      loggedIn,\n      artistName,\n      trackName,\n      albumName,\n      error,\n      position,\n      duration,\n      playing,\n      nickname\n    } = this.state;\n\n    return (\n\n      <div className=\"Player\">\n        <p>\n          <button class=\"btn-circle\" onClick={() => this.onPrevClick()}>\n            <i class=\"fas fa-step-backward\"></i>\n          </button>\n          <button onClick={() => this.onPlayClick()}>\n            {playing ? (\n              <i class=\"fas fa-pause\"></i>\n            ) : (\n              <i class=\"fas fa-play\"></i>\n            )}\n          </button>\n          <button onClick={() => this.onNextClick()}>\n            {\" \"}\n            <i class=\"fas fa-step-forward\"></i>{\" \"}\n          </button>\n        </p>\n        <div>\n          <table class=\"table table-bordered bg-white\" id=\"playlistTable\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Song</th>\n                <th scope=\"col\">Artist</th>\n                <th scope=\"col\">Album</th>\n                <th scope=\"col\">Added</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <th scope=\"row\">{position}</th>\n                <td>{trackName}</td>\n                <td>{artistName}</td>\n                <td>{albumName}</td>\n                <td>{nickname}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Player;\n","import React from \"react\";\n\nconst Playlist = props => {\n  return <div>{props.children}</div>;\n};\nexport default Playlist;\n\n//TO DO\n// map the songs array and render them\n// set if styling statement to change based on if song is played\n// render out as a table\n// ^ using a for loop, or make a component for each individual song\n//    ^  ie Playlist & PlaylistItem\n","require(\"dotenv\").config();\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"749b6ea423c24fef905f41108b8c3a3f\";\nexport const clientSecret = \"e42d147ddad74c2ab3cee9af552aac39\";\nexport const redirectUri = \"https://car-a-ok.herokuapp.com/\";\nexport const scopes = [\n  \"user-top-read\",\n  \"user-read-email\",\n  \"user-read-private\",\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"streaming\",\n  \"user-modify-playback-state\",\n  \"app-remote-control\",\n  \"playlist-modify-public\"\n];\n\n//id(\"749b6ea423c24fef905f41108b8c3a3f\");\n//e42d147ddad74c2ab3cee9af552aac39\n\n//process.env.SPOTIFY_SECRET\n","import \"./Room.css\";\nimport React from \"react\";\nimport Modal from \"react-modal\";\nimport Button from \"react-bootstrap/Button\";\nimport {\n  authEndpoint,\n  clientId,\n  redirectUri,\n  scopes\n} from \"./config_example.js\";\n\nclass Host extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      nickname: \"\",\n      modalIsOpen: false\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.afterOpenModal = this.afterOpenModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n  };\n\n  openModal() {\n    this.setState({ modalIsOpen: true });\n  }\n\n  afterOpenModal() {}\n\n  closeModal() {\n    this.setState({ modalIsOpen: false });\n  }\n\n  render() {\n    return (\n      <div>\n        <Button className=\"userButton\" onClick={this.openModal}>\n          New Room\n        </Button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          className=\"Modal\"\n          overlayClassName=\"Overlay\"\n          contentLabel=\"Example Modal\"\n        >\n          <Button id=\"close\" onClick={this.closeModal}>\n            <i class=\"fas fa-window-close\"></i>\n          </Button>\n          <div className=\"content\">\n            <p>\n              Let's get started with a new playlist. Enter a nickname for\n              yourself.\n            </p>\n            {this.props.children}\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default Host;\n","require(\"dotenv\").config();\nexport const guestEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const guestId = \"749b6ea423c24fef905f41108b8c3a3f\";\nexport const guestUri = \"http://localhost:3000/\";\nexport const guestScopes = [\n  \"user-top-read\",\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"playlist-modify-public\"\n];\n","import \"./Room.css\";\nimport React from \"react\";\nimport Modal from \"react-modal\";\nimport Button from \"react-bootstrap/Button\";\nimport {\n  guestEndpoint,\n  guestId,\n  guestUri,\n  guestScopes\n} from \"./guest_config.js\";\n\nclass Guest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      roomId: \"\",\n      nickname: \"\",\n      modalIsOpen: false\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.afterOpenModal = this.afterOpenModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n    this.getSong(this.state.token);\n  };\n\n  openModal() {\n    this.setState({ modalIsOpen: true });\n  }\n\n  afterOpenModal() {}\n\n  closeModal() {\n    this.setState({ modalIsOpen: false });\n  }\n\n  render() {\n    return (\n      <div>\n        <Button onClick={this.openModal}>Join Room</Button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          className=\"Modal\"\n          overlayClassName=\"Overlay\"\n          contentLabel=\"Example Modal\"\n        >\n          <Button id=\"close\" onClick={this.closeModal}>\n            <i class=\"fas fa-window-close\"></i>\n          </Button>\n          <div className=\"content\">\n            <p>Let's get you started. Enter a nickname for yourself.</p>\n            {this.props.children}\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\n// <div className=\"form-inline\">\n//   <h6>Enter ur username</h6>\n//   <div id=\"room-form\" className=\"form-inline\">\n//     <div id=\"room-input\">\n//       <label for=\"username\"></label>\n//       <input\n//         type=\"text\"\n//         class=\"form-control\"\n//         id=\"username\"\n//         placeholder=\"enter ur name (edit this in room.js)\"\n//       />\n//     </div>\n\n//     <button type=\"submit\" class=\"btn btn-primary\" id=\"room-btn\">\n//       Create New Room\n//     </button>\n//   </div>\n// </div>\n\nexport default Guest;\n","import axios from \"axios\";\n\nexport default {\n  // Gets books from the Google API\n  // getTracks: function(q) {\n  //   return axios.get(\"/api/google\", { params: { q: \"title:\" + q } });\n  // },\n\n  // Gets all saved books\n  getTracks: function() {\n    return axios.get(\"/api/tracks\");\n  },\n  getTracksById: function(id) {\n    return axios.get(\"/api/tracks/\" + id);\n  },\n  getTracksByRoomId: function(id) {\n    return axios.get(\"/api/tracks/\" + id);\n  },\n  // Deletes the saved book with the given id\n  deleteTracks: function(id) {\n    return axios.delete(\"/api/tracks/\" + id);\n  },\n  // Saves an book to the database\n  saveTrack: function(trackData) {\n    return axios.post(\"/api/tracks\", trackData); //change /api/tracks to /3001 to bypass proxy\n  }\n};\n\n//instead of api/tracks, use /room/:roomId and then /room/:roomId/api/:trackId\n","import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport \"./App.css\";\nimport hash from \"./hash\";\nimport logo from \"./spotify-icon.png\";\nimport Player from \"./Player\";\nimport AltPlayer from \"./components/Player/index\";\nimport Playlist from \"./components/Playlist/index\";\nimport Host from \"./Host\";\nimport Guest from \"./Guest\";\nimport API from \"./utils/API\";\nimport ReactDOM from \"react-dom\";\nimport SpotifyPlayer from \"react-spotify-player\";\nimport ChangeColorFunction from \"./components/Colorchange\";\nimport {\n  authEndpoint,\n  clientId,\n  redirectUri,\n  scopes\n} from \"./config_example.js\";\nimport {\n  guestEndpoint,\n  guestId,\n  guestUri,\n  guestScopes\n} from \"./guest_config.js\";\n// Identify if host or guest\n// Full search\n// Playlist\n//\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      nickname: \"\",\n      songArray: [],\n      room: \"\",\n      username: \"\",\n      tempTrack: \"\",\n      tempArtist: \"\",\n      tempAlbum: \"\",\n      token: \"\",\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      nextToPlay: \"\",\n      progress_ms: 0\n    };\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n  }\n\n  componentDidMount() {\n    //Set token\n    let _token = hash.access_token;\n    if (_token) {\n      this.setState({\n        token: _token\n      });\n      this.makeRoom();\n      setTimeout(this.getStuffFromDB, 500);\n    }\n  }\n  makeRoom = () => {\n    // var hashids = new Hashids(\"this is my salt\"),\n    //   id = hashids.encode(1, 2, 3),\n    //   numbers = hashids.decode(id);\n\n    var roomId;\n    var nick = sessionStorage.getItem(\"nickname\");\n\n    if (sessionStorage.getItem(\"room\")) {\n      roomId = sessionStorage.getItem(\"room\");\n\n      this.setState({\n        room: roomId,\n        nickname: nick\n      });\n      sessionStorage.removeItem(\"room\");\n      return this.state.room;\n    } else {\n      roomId = \"\";\n      var Arr = [];\n      function getRandomInt() {\n        return Math.floor(Math.random() * Math.floor(10));\n      }\n      for (var i = 0; i < 4; i++) {\n        Arr.push(getRandomInt());\n      }\n\n      roomId = Arr.join(\"\");\n\n      console.log(roomId);\n      this.setState({\n        room: roomId,\n        nickname: nick\n      });\n\n      sessionStorage.removeItem(\"room\");\n      return this.state.room;\n    }\n  };\n\n  getStuffFromDB = () => {\n    API.getTracksByRoomId(this.state.room).then(res => {\n      this.setState({\n        songArray: res.data\n      });\n      console.log(this.state.songArray);\n    });\n  };\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        console.log(\"data\", data);\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms\n        });\n      }\n    });\n  }\n\n  getSong(token) {\n    var query = \"\";\n    if (this.state.tempTrack && this.state.tempArtist && this.state.tempAlbum) {\n      query = `https://api.spotify.com/v1/search?q=${this.state.tempTrack}&type=track&artist=${this.state.tempArtist}&album=${this.state.tempAlbum}&offset=0&limit=1`;\n    } else if (\n      this.state.tempTrack &&\n      this.state.tempArtist &&\n      !this.state.tempAlbum\n    ) {\n      query = `https://api.spotify.com/v1/search?q=${this.state.tempTrack}&type=track&artist=${this.state.tempArtist}&offset=0&limit=1`;\n    } else if (\n      this.state.tempTrack &&\n      !this.state.tempArtist &&\n      this.state.tempAlbum\n    ) {\n      query = `https://api.spotify.com/v1/search?q=${this.state.tempTrack}&type=track&album=${this.state.tempAlbum}&offset=0&limit=1`;\n    } else if (\n      !this.state.tempTrack &&\n      this.state.tempArtist &&\n      this.state.tempAlbum\n    ) {\n      query = `https://api.spotify.com/v1/search?type=track&artist=${this.state.tempArtist}&album=${this.state.tempAlbum}&offset=0&limit=1`;\n    } else if (\n      this.state.tempTrack &&\n      !this.state.tempArtist &&\n      !this.state.tempAlbum\n    ) {\n      query = `https://api.spotify.com/v1/search?q=${this.state.tempTrack}&type=track&offset=0&limit=1`;\n    } else if (\n      !this.state.tempTrack &&\n      this.state.tempArtist &&\n      !this.state.tempAlbum\n    ) {\n      query = `https://api.spotify.com/v1/search?type=track&artist=${this.state.tempArtist}&offset=0&limit=1`;\n    } else if (\n      !this.state.tempTrack &&\n      !this.state.tempArtist &&\n      this.state.tempAlbum\n    ) {\n      query = `https://api.spotify.com/v1/search?type=track&album=${this.state.tempAlbum}&offset=0&limit=1`;\n    } else {\n      alert(\"Must enter at least one value!\");\n    }\n\n    $.ajax({\n      url: query,\n\n      //\"https://api.spotify.com/v1/search?q=humble&type=track&artist=kendrick&offset=0&limit=1\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        console.log(\"data\", data);\n        var nickName = sessionStorage.getItem(\"nickname\");\n        API.saveTrack({\n          roomId: this.state.room,\n          trackId: data.tracks.items[0].id,\n          trackName: data.tracks.items[0].name,\n          artistName: data.tracks.items[0].artists[0].name,\n          albumName: data.tracks.items[0].album.name,\n          albumCover: data.tracks.items[0].album.images[1].url,\n          userName: nickName\n        });\n        console.log(this.state.nickname);\n      }\n    }).then(setTimeout(this.getStuffFromDB, 1000));\n  }\n\n  setSong() {\n    alert(\"Hello!\");\n  }\n\n  // setPlaylist() {\n  //   //map songs up until current playing, then set all next song to be played to state\n  //   this.songArray.map(song => {\n  //     song.played = false;\n  //   });\n  //   this.songArray.trackId = this.state.is_playing;\n  // }\n\n  setCurrentPlayingSong(trackId) {\n    alert(trackId);\n  }\n  handleTrack(data) {\n    console.log(\"handletrack\");\n    API.saveTrack({\n      roomId: this.makeRoom(),\n      trackId: data.tracks.items[0].id,\n      trackName: data.tracks.items[0].name,\n      artistName: data.tracks.items[0].artists[0].name,\n      albumName: data.tracks.items[0].album.name,\n      albumCover: data.tracks.items[0].album.images[1].url,\n      userName: this.state.nickname\n    }).then(res => console.log(\"result:\" + res));\n  }\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n\n    this.getSong(this.state.token);\n  };\n\n  handleModalSubmit = () => {\n    sessionStorage.setItem(\"nickname\", this.state.nickname);\n    if (this.state.room) {\n      sessionStorage.setItem(\"room\", this.state.room);\n    }\n\n    this.ChangeColorFunction();\n  };\n\n  render() {\n    const github = (\n      <a href=\"https://github.com/JohnEBabinJr/final-project/\" className=\"mr-1\">\n        <i className=\"fab fa-github fa-1x\"></i>\n      </a>\n    );\n\n    const aboutUs = (\n      <a href=\"/about\" className=\"ml-2\">\n        About Us\n      </a>\n    );\n\n    const homebutton = {\n      float: \"left\",\n      marginLeft: \"10px\"\n    };\n\n    const home = (\n      <a href=\"/\">\n        <i className=\"fas fa-home\"></i>\n      </a>\n    );\n\n    const pee = (\n      <a href=\"https://jon-finder.herokuapp.com/\">\n        <i class=\"fas fa-toilet\"></i>\n      </a>\n    );\n\n    const props = {};\n\n    return (\n      // Put things that you want to appear on every page vvv\n      <div className=\"App\">\n        <div className=\"home\">\n          <a style={homebutton}>{home}</a>\n        </div>\n        <div className=\"links\">\n          {github} | {pee} | {aboutUs} |\n        </div>\n        <header className=\"App-header\">\n          {this.state.token && (\n            <div>\n              <div class=\"container\">\n                <div class=\"row\">\n                  <div class=\"col\">\n                    <div className=\"Player-header\">\n                      <h2>Now Playing</h2>\n                      <p>\n                        Let's get this party started, {this.state.username}!\n                        Your room number is:\n                        <br></br>\n                        <span className=\"roomID\">{this.state.room}</span>\n                      </p>\n                      <hr class=\"my-4\" id=\"spacer\"></hr>\n                    </div>\n                    <form>\n                      <input\n                        type=\"text\"\n                        placeholder=\"Track\"\n                        name=\"tempTrack\"\n                        value={this.state.tempTrack}\n                        onChange={this.handleInputChange}\n                      />\n                      <input\n                        type=\"text\"\n                        placeholder=\"Artist\"\n                        name=\"tempArtist\"\n                        value={this.state.tempArtist}\n                        onChange={this.handleInputChange}\n                      />\n                      <input\n                        type=\"text\"\n                        placeholder=\"Album\"\n                        name=\"tempAlbum\"\n                        value={this.state.tempAlbum}\n                        onChange={this.handleInputChange}\n                      />\n                      <button onClick={this.handleFormSubmit}>Submit</button>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          {!this.state.token && (\n            <div className=\"container\">\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <div className=\"row\">\n                <div className=\"col col-5 mx-auto\" id=\"app\">\n                  <h1>\n                    Car - <i class=\"fas fa-road\"></i> - OK\n                  </h1>\n                  <p className=\"lead mx-3\">\n                    Collaborate on the ultimate roadtrip playlist with your\n                    friends using Spotify. Share the link, queue up songs, and\n                    export your playlist to relive the memories.\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"container\" id=\"buttonContainer\">\n            <div className=\"row\">\n              <div className=\"col\">\n                {\" \"}\n                {/* Host Login */}\n                {!this.state.token && (\n                  <Host>\n                    {\" \"}\n                    <form>\n                      <input\n                        type=\"text\"\n                        placeholder=\"Nickname\"\n                        name=\"nickname\"\n                        value={this.state.nickname}\n                        onChange={this.handleInputChange}\n                      />\n\n                      <a\n                        id=\"goButton\"\n                        className=\"btn btn--loginApp-link\"\n                        href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                          \"%20\"\n                        )}&response_type=token&show_dialog=true`}\n                        onClick={this.handleModalSubmit}\n                      >\n                        Go\n                      </a>\n                    </form>\n                  </Host>\n                )}\n              </div>\n\n              <div className=\"col\">\n                {\" \"}\n                {/* Guest Login */}\n                {!this.state.token && (\n                  <Guest>\n                    {\" \"}\n                    <form className=\"form-inline\">\n                      <div className=\"form-group mb-2\">\n                        <label for=\"nickname\" className=\"sr-only\">\n                          nickname\n                        </label>\n                        <input\n                          type=\"text\"\n                          className=\"form-control-plaintext\"\n                          name=\"nickname\"\n                          placeholder=\"Nickname\"\n                          value={this.state.nickname}\n                          onChange={this.handleInputChange}\n                        />\n                        <input\n                          type=\"text\"\n                          className=\"form-control-plaintext\"\n                          placeholder=\"Room ID\"\n                          name=\"room\"\n                          value={this.state.room}\n                          onChange={this.handleInputChange}\n                        />\n                        <a\n                          className=\"btn btn--loginApp-link\"\n                          href={`${guestEndpoint}?client_id=${guestId}&redirect_uri=${guestUri}&scope=${guestScopes.join(\n                            \"%20\"\n                          )}&response_type=token&show_dialog=true`}\n                          onClick={this.handleModalSubmit}\n                        ></a>\n                      </div>\n                    </form>\n                  </Guest>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Player */}\n          {/* {this.state.token && (\n            <Player\n              token={this.state.token}\n              item={this.state.item}\n              is_playing={this.state.is_playing}\n              progress_ms={this.progress_ms}\n            />\n          )} */}\n\n          {this.state.token && (\n            <Playlist>\n              {this.state.songArray.map(song => (\n                <div>\n                  <tr>\n                    <td>{song.trackName}</td>\n                    <td>{song.artistName}</td>\n                    <td>{song.albumName}</td>\n                    <td>{song.userName}</td>\n                    <td>\n                      <button\n                        onClick={() => this.setCurrentPlayingSong(song.trackId)}\n                      >\n                        Nice\n                      </button>\n                    </td>\n                  </tr>\n                </div>\n              ))}\n            </Playlist>\n          )}\n          <AltPlayer token={this.state.token} nickname={this.state.nickname} />\n          {/* <SpotifyPlayer uri=\"spotify:album:1TIUsv8qmYLpBEhvmBmyBk\" /> */}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = { ColorHolder: \"#00BCD4\" };\n  }\n\n  ChangeColorFunction = () => {\n    var ColorCode =\n      \"rgb(\" +\n      Math.floor(Math.random() * 256) +\n      \",\" +\n      Math.floor(Math.random() * 256) +\n      \",\" +\n      Math.floor(Math.random() * 256) +\n      \")\";\n    this.setState({\n      ColorHolder: ColorCode\n    });\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nconsole.log(\"made it here\");\nReactDOM.render(<App />, document.getElementById(\"root\"));\nconsole.log(\"should be calling app\");\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}